<?php

function fun($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "Example function.\n";
    return $retval;
}


// Внутри функции можно использовать любой корректный PHP-код, в том числе другие функции и даже объявления классов.

// Функции не обязаны быть определены до их использования, исключая тот случай, когда функции определяются условно:

if (false) {
  function foo()
  {
    echo "Я не существую до тех пор, пока выполнение программы меня не достигнет.\n";
  }
}

// Все функции и классы PHP имеют глобальную область видимости - они могут быть вызваны вне функции, даже если были определены внутри и наоборот.

function foo() 
{
  function bar() 
  {
    echo "Я не существую пока не будет вызвана foo().\n";
  }
}


/* Мы пока не можем обратиться к bar(),
   поскольку она еще не определена. */

foo();

/* Теперь мы можем вызвать функцию bar(),
   обработка foo() сделала ее доступной. */

bar();

// PHP не поддерживает перегрузку функции, также отсутствует возможность переопределить или удалить объявленную ранее функцию.

// По-умолчанию аргументы передаются по значению
function takes_array($input)
{
    $input[0] = '100';
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}

// Если вы хотите, что бы аргумент всегда передавался по ссылке, вы можете указать амперсанд (&) перед именем аргумента в описании функции

//Функция может определять значения по умолчанию в стиле C++ для скалярных аргументов, например:
function makecoffee($type = "капучино")
{
    return "Готовим чашку $type.\n";
}

// PHP также позволяет использовать массивы (array) и специальный тип NULL в качестве значений по умолчанию

// Объявление типов:
// Объявления типов позволяют функциям строго задавать тип передаваемых параметров. Передача в функцию значений несоответствующего типа будет приводить к ошибке: в PHP 7 будет выбрасываться исключение TypeError.

// Чтобы объявить тип агрумента, необходимо перед его именем добавить имя требуемого типа.

// переменное количество аргументов:
function sum(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

// Если конструкция return не указана, то функция вернет значение NULL.

// возврат ссылки:
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();

// Обращение к функциям через переменные
$func = 'foo';
$func();        // Вызывает функцию foo()

// Анонимные функции, также известные как замыкания (closures), позволяют создавать функции, не имеющие определенных имен.

// use() в них -- для получения доступа к переменным из области видимости родителя
?>